{
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "$id": "class.property.schema.json",
    "title": "Class Property",
    "type": "object",
    "description": "A class property.",
    "allOf": [
        {
            "$ref": "tilesetProperty.schema.json"
        }
    ],
    "properties": {
        "name": {
            "type": "string",
            "minLength": 1,
            "description": "The name of the property, e.g. for display purposes."
        },
        "description": {
            "type": "string",
            "minLength": 1,
            "description": "The description of the property."
        },
        "type": {
            "description": "The element type.",
            "anyOf": [
                {
                    "const": "SCALAR"
                },
                {
                    "const": "VEC2"
                },
                {
                    "const": "VEC3"
                },
                {
                    "const": "VEC4"
                },
                {
                    "const": "MAT2"
                },
                {
                    "const": "MAT3"
                },
                {
                    "const": "MAT4"
                },
                {
                    "const": "STRING"
                },
                {
                    "const": "BOOLEAN"
                },
                {
                    "const": "ENUM"
                },
                {
                    "type": "string"
                }
            ]
        },
        "componentType": {
            "description": "The datatype of the element's components. Only applicable to `SCALAR`, `VECN`, and `MATN` types.",
            "anyOf": [
                {
                    "const": "INT8"
                },
                {
                    "const": "UINT8"
                },
                {
                    "const": "INT16"
                },
                {
                    "const": "UINT16"
                },
                {
                    "const": "INT32"
                },
                {
                    "const": "UINT32"
                },
                {
                    "const": "INT64"
                },
                {
                    "const": "UINT64"
                },
                {
                    "const": "FLOAT32"
                },
                {
                    "const": "FLOAT64"
                },
                {
                    "type": "string"
                }
            ]
        },
        "enumType": {
            "type": "string",
            "description": "Enum ID as declared in the `enums` dictionary. Required when `type` is `ENUM`."
        },
        "count": {
            "type": "integer",
            "minimum": 1,
            "default": 1,
            "description": "The number of elements in the property. When `count` is greater than 1 the property is a fixed-length array of `count` elements. When `count` is 1 the property is a single element. Only applicable when `hasFixedCount` is true."
        },
        "hasFixedCount": {
            "type": "boolean",
            "default": true,
            "description": "When true, indicates the property has a fixed number of elements (see `count`). When false, indicates that the property is a variable-length array."
        },
        "normalized": {
            "type": "boolean",
            "description": "Specifies whether integer values are normalized. Only applicable to `SCALAR`, `VECN`, and `MATN` types with integer component types. For unsigned integer component types, values are normalized between `[0.0, 1.0]`. For signed integer component types, values are normalized between `[-1.0, 1.0]`. For all other component types, this property must be false.",
            "default": false
        },
        "offset": {
            "allOf": [
                {
                    "$ref": "definitions.schema.json#/definitions/numericValue"
                }
            ],
            "description": "An offset to apply to property values. Only applicable to `SCALAR`, `VECN`, and `MATN` types."
        },
        "scale": {
            "allOf": [
                {
                    "$ref": "definitions.schema.json#/definitions/numericValue"
                }
            ],
            "description": "A scale to apply to property values. Only applicable to `SCALAR`, `VECN`, and `MATN` types."
        },
        "max": {
            "allOf": [
                {
                    "$ref": "definitions.schema.json#/definitions/numericValue"
                }
            ],
            "description": "Maximum allowed value for the property. Only applicable to `SCALAR`, `VECN`, and `MATN` types. The `normalized`, `offset`, and `scale` properties have no effect on the maximum, it always corresponds to the actual value."
        },
        "min": {
            "allOf": [
                {
                    "$ref": "definitions.schema.json#/definitions/numericValue"
                }
            ],
            "description": "Minimum allowed value for the property. Only applicable to `SCALAR`, `VECN`, and `MATN` types. The `normalized`, `offset`, and `scale` properties have no effect on the minimum, it always corresponds to the actual value."
        },
        "required": {
            "type": "boolean",
            "description": "If required, the property must be present in every entity conforming to the class. If not required, individual entities may include `noData` values, or the entire property may be omitted. As a result, `noData` has no effect on a required property. Client implementations may use required properties to make performance optimizations.",
            "default": false
        },
        "noData": {
            "allOf": [
                {
                    "$ref": "definitions.schema.json#/definitions/noDataValue"
                }
            ],
            "description": "A `noData` value represents missing data — also known as a sentinel value — wherever it appears. `BOOLEAN` properties may not specify `noData` values."
        },
        "default": {
            "allOf": [
                {
                    "$ref": "definitions.schema.json#/definitions/anyValue"
                }
            ],
            "description": "A default value to use when encountering a `noData` value or an omitted property."
        },
        "semantic": {
            "type": "string",
            "minLength": 1,
            "description": "An identifier that describes how this property should be interpreted. The semantic cannot be used by other properties in the class."
        },
        "extensions": {},
        "extras": {}
    },
    "required": [
        "type"
    ]
}