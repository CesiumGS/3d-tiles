{
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "$id": "propertyTable.property.schema.json",
    "title": "Property Table Property",
    "type": "object",
    "description": "An array of binary property values.",
    "allOf": [
        {
            "$ref": "subtreeProperty.schema.json"
        }
    ],
    "properties": {
        "values": {
            "type": "integer",
            "minimum": 0,
            "description": "The index of the accessor containing property values. The data type of property values is determined by the property definition: When `type` is `BOOLEAN` values are packed into a bitstream. When `type` is `STRING` values are stored as byte sequences and decoded as UTF-8 strings. When `type` is `SCALAR`, `VECN`, or `MATN` the values are stored as the provided `componentType`. When `type` is `ENUM` values are stored as the enum's `valueType`. Each enum value in the array must match one of the allowed values in the enum definition. `arrayOffsets` is required for variable-length arrays and `stringOffsets` is required for strings (for variable-length arrays of strings, both are required)."
        },
        "arrayOffsets": {
            "type": "integer",
            "minimum": 0,
            "description": "The index of the accessor containing offsets for variable-length arrays. The number of offsets is equal to the property table `count` plus one. The offsets represent the start positions of each array, with the last offset representing the position after the last array. The array length is computed using the difference between the current offset and the subsequent offset. If `type` is `STRING` the offsets index into the string offsets array (stored in `stringOffsets`), otherwise they index into the property array (stored in `values`). The accessor `componentCount` must be 1 and the accessor `componentType` must be `UINT8`, `UINT16`, `UINT32`, or `UINT64`."
        },
        "stringOffsets": {
            "type": "integer",
            "minimum": 0,
            "description": "The index of the accessor containing offsets for strings. The number of offsets is equal to the number of string elements plus one. The offsets represent the byte offsets of each string in the property array (stored in `values`), with the last offset representing the byte offset after the last string. The string byte length is computed using the difference between the current offset and the subsequent offset. The accessor `componentCount` must be 1 and the accessor `componentType` must be `UINT8`, `UINT16`, `UINT32`, or `UINT64`."
        },
        "offset": {
            "allOf": [
                {
                    "$ref": "definitions.schema.json#/definitions/numericValue"
                }
            ],
            "description": "An offset to apply to property values. Only applicable for `SCALAR`, `VECN`, and `MATN` types. Overrides the class property's `offset` if both are defined."
        },
        "scale": {
            "allOf": [
                {
                    "$ref": "definitions.schema.json#/definitions/numericValue"
                }
            ],
            "description": "A scale to apply to property values. Only applicable for `SCALAR`, `VECN`, and `MATN` types. Overrides the class property's `scale` if both are defined."
        },
        "extensions": {},
        "extras": {}
    },
    "required": [
        "values"
    ]
}
